# to redeem the value of the variable we use ${LIGHT_YEARS_ENGINE_TARGET_NAME}
add_library(${LIGHT_YEARS_ENGINE_TARGET_NAME} STATIC
 ${CMAKE_CURRENT_SOURCE_DIR}/include/framework/Application.h
 ${CMAKE_CURRENT_SOURCE_DIR}/src/framework/Application.cpp

 ${CMAKE_CURRENT_SOURCE_DIR}/include/framework/core.h
 ${CMAKE_CURRENT_SOURCE_DIR}/src/framework/core.cpp

 ${CMAKE_CURRENT_SOURCE_DIR}/include/framework/World.h
 ${CMAKE_CURRENT_SOURCE_DIR}/src/framework/World.cpp

 ${CMAKE_CURRENT_SOURCE_DIR}/include/framework/Actor.h
 ${CMAKE_CURRENT_SOURCE_DIR}/src/framework/Actor.cpp

 ${CMAKE_CURRENT_SOURCE_DIR}/include/framework/Object.h
 ${CMAKE_CURRENT_SOURCE_DIR}/src/framework/Object.cpp

 ${CMAKE_CURRENT_SOURCE_DIR}/include/framework/AssestManager.h
 ${CMAKE_CURRENT_SOURCE_DIR}/src/framework/AssestManager.cpp

  ${CMAKE_CURRENT_SOURCE_DIR}/include/framework/MathUtility.h
 ${CMAKE_CURRENT_SOURCE_DIR}/src/framework/MathUtility.cpp

 ${CMAKE_CURRENT_SOURCE_DIR}/include/EntryPoint.h
 ${CMAKE_CURRENT_SOURCE_DIR}/src/EntryPoint.cpp
)

# to find the target library
target_include_directories(${LIGHT_YEARS_ENGINE_TARGET_NAME} PUBLIC
	${CMAKE_CURRENT_SOURCE_DIR}/include
)

# linking the library so we can include this in our code
target_link_libraries(${LIGHT_YEARS_ENGINE_TARGET_NAME} PUBLIC sfml-graphics
 sfml-window
 sfml-system
 sfml-audio
 )

# to do the repetative task in ease while creating a macro to add the dll in postBuild
function(CopyLibToTarget LIB_NAME TARGET_NAME)
add_custom_command(TARGET
${TARGET_NAME}
POST_BUILD
COMMAND
${CMAKE_COMMAND} -E copy_if_different
 #FROM
$<TARGET_FILE:${LIB_NAME}>
 #TO
$<TARGET_FILE_DIR:${TARGET_NAME}>
)	
endfunction()

CopyLibToTarget(sfml-system ${LIGHT_YEARS_ENGINE_TARGET_NAME})
CopyLibToTarget(sfml-graphics ${LIGHT_YEARS_ENGINE_TARGET_NAME})
CopyLibToTarget(sfml-window ${LIGHT_YEARS_ENGINE_TARGET_NAME})
CopyLibToTarget(sfml-audio ${LIGHT_YEARS_ENGINE_TARGET_NAME})

